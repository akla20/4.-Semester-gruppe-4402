#include <Arduino.h>
#include <esp_now.h>
#include <WiFi.h>

//The mac address of the central unit (The Master)
uint8_t broadcastAddress0[] = {0x08, 0x3A, 0xF2, 0x45, 0x34, 0xDC}; 
uint8_t broadcastAddress1[] = {0x08, 0x3A, 0xF2, 0x45, 0x35, 0xA4}; 
uint8_t broadcastAddress2[] = {0x08, 0x3A, 0xF2, 0x43, 0x57, 0x98}; 


//SD KORT:
#include "FS.h"
#include "SD.h"
#include "SPI.h"

SPIClass SDSPI(HSPI);

#define CS       33
#define SCLK     25 //Ændret til at passe med vores board (ændret fra 25)
#define MISO     27
#define MOSI     26 //Ændret til at passe med vores board (ændret fra 26)

// SD KORT:
File file;


//Declare flags
bool start1 = true;
bool flag = true;
bool SendData = false;
bool Stop = true;

bool Start_flag = false;             // Used for starting the test
bool Newdata_flag = false;           // Used for identifying when new data is send from the peripheral unit
bool Departure_time_flag = true;     // Used for checking departure time
//bool kode_skifte_flag = true;
bool sensor_change_flag = true;      // Used for checking that sensor reading change.
bool first_time_flag = true;         // Used to control which sensor that startes.
bool Sensor_1_flag = false;          // Used to determin that sensor 1, is the first one activated.
bool Sensor_2_flag = false;          // Used to determin that sensor 2, is the first one activated.
bool Out_flag = true;                // Used to keep in while loop when participant is out of the test
bool Give_warning = false;

//Declare counting variables
int i;    // Used for sensor shifting counting
int k = 0;
int m = 0;
int p1_warning = 0; // Counting warnings

//Declare timer variables
unsigned long Timer_run, Timer_begin, Time;

// Declare string for Esp-Now communication
String success;

//Declare the message to be recived from the periferials (Structure must match)
typedef struct struct_send_times_and_flag {
  int sensor_identifier;
  float p1_arrival_time;
  float p1_departure_time;
  float p2_arrival_time;
  float p2_departure_time;
  float p3_arrival_time;
  float p3_departure_time;
  float p4_arrival_time;
  float p4_departure_time;
} struct_send_times_and_flag;

// Create a struct_message to hold incoming sensor readings
struct_send_times_and_flag incomingReadings;

//Needed for two way communication
esp_now_peer_info_t peerInfo;

//Initliase the messege to be send to all perifireals (MUST MATCH THEIR NAME IN THEIR CODE)
typedef struct struct_initialisetime {
  bool start;
} struct_initialisetime;

// Create a struct struct_initialisetime called timesent
struct_initialisetime timesent;

// callback function for when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  char macStr[18];
  Serial.print("Packet to: ");
  // Copies the sender mac address to a string
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print(macStr);
  Serial.print(" send status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

// Callback function when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&incomingReadings, incomingData, sizeof(incomingReadings));
  Serial.println("NEW DATA: ");
  Serial.print("P1 Arrival_time: ");
  Serial.println(incomingReadings.p1_arrival_time);
  Serial.print("P1 Departure_time: ");
  Serial.println(incomingReadings.p1_departure_time);

  // One sensor sends sensor_change_flag = true and the other sends sensor_change_flag = false.
  //  sensor_change_flag = incomingReadings.sensor_change_flag;

  // Used to determin that new data is send.
  Newdata_flag = true;
}

////////// MONSTER ARRAYS //////////////////

//Hele arrayet i millis uden tolerance
int Beeb_array [] = {0, 8470, 16940, 25410, 33880, 42350, 50820, 59290, 67760, //Level 1
                     75760, 83760, 91760, 99760, 107760, 115760, 123760, 131760, //Level 2
                     139340, 146920, 154500, 162080, 169660, 177240, 184820, 192400, //Level 3
                     199600, 206800, 214000, 221200, 228400, 235600, 242800, 250000, 257200, //Level 4
                     264060, 270920, 277780, 284640, 291500, 298360, 305220, 312080, 318940, //Level 5
                     325490, 332040, 338590, 345140, 351690, 358240, 364790, 371340, 377890, 384440, //Level 6
                     390700, 396960, 403220, 409480, 415740, 422000, 428260, 434520, 440780, 447040, //Level 7
                     453040, 459040, 465040, 471040, 477040, 483040, 489040, 495040, 501040, 507040, 513040, //Level 8
                     518800, 524560, 530320, 536080, 541840, 547600, 553360, 559120, 564880, 570640, 576400, //Level 9
                     581940, 587480, 593020, 598560, 604100, 609640, 615180, 620720, 626260, 631800, 637340, //Level 10
                     642670, 648000, 653330, 658660, 663990, 669320, 674650, 679980, 685310, 690640, 695970, 701300, //Level 11
                     706440, 711580, 716720, 721860, 727000, 732140, 737280, 742420, 747560, 752700, 757840, 762980, //Level 12
                     767950, 772920, 777890, 782860, 787830, 792800, 797770, 802740, 807710, 812680, 817650, 822620, 827590, //Level 13
                     832390, 837190, 841990, 846790, 851590, 856390, 861190, 865990, 870790, 875590, 880390, 885190, 889990, //Level 14
                     894640, 899290, 903940, 908590, 913240, 917890, 922540, 927190, 931840, 936490, 941140, 945790, 950440, //Level 15
                     954940, 959440, 963940, 968440, 972940, 977440, 981940, 986440, 990940, 995440, 999940, 1004440, 1008940, 1013440, //Level 16
                     1017800, 1022160, 1026520, 1030880, 1035240, 1039600, 1043960, 1048320, 1052680, 1057040, 1061400, 1065760, 1070120, 1074480, //Level 17
                     1078720, 1082960, 1087200, 1091440, 1095680, 1099920, 1104160, 1108400, 1112640, 1116880, 1121120, 1125360, 1129600, 1133840, 1138080, //Level 18
                     1142190, 1146300, 1150410, 1154520, 1158630, 1162740, 1166850, 1170960, 1175070, 1179180, 1183290, 1187400, 1191510, 1195620, 1199730, //Level 19
                     1203730, 1207730, 1211730, 1215730, 1219730, 1223730, 1227730, 1231730, 1235730, 1239730, 1243730, 1247730, 1251730, 1255730, 1259730, 1263730, //Level 20
                     1267620, 1271510, 1275400, 1279290, 1283180, 1287070, 1290960, 1294850, 1298740, 1302630, 1306520, 1310410, 1314300, 1318190, 1322080, 1325970 //Level 21
                    };

//____________________________________________________________________________

//Hele arrayet i millis med tolerancer
int Beeb_array_with_tollerance [] = {0, 9320, 17790, 26260, 34730, 43200, 51670, 60140, 68610, //Level 1
                                     76560, 84560, 92560, 100560, 108560, 116560, 124560, 132560, //Level 2
                                     140100, 147680, 155260, 162840, 170420, 178000, 185580, 193160, //Level 3
                                     200320, 207520, 214720, 221920, 229120, 236320, 243520, 250720, 257920, //Level 4
                                     264750, 271610, 278470, 285330, 292190, 299050, 305910, 312770, 319630, //Level 5
                                     326150, 332700, 339250, 345800, 352350, 358900, 365450, 372000, 378550, 385100, //Level 6
                                     391330, 397590, 403850, 410110, 416370, 422630, 428890, 435150, 441410, 447670, //Level 7
                                     453640, 459640, 465640, 471640, 477640, 483640, 489640, 495640, 501640, 507640, 513640, //Level 8
                                     519380, 525140, 530900, 536660, 542420, 548180, 553940, 559700, 565460, 571220, 576980, //Level 9
                                     582490, 588030, 593570, 599110, 604650, 610190, 615730, 621270, 626810, 632350, 637890, //Level 10
                                     643200, 648530, 653860, 659190, 664520, 669850, 675180, 680510, 685840, 691170, 696500, 701830, //Level 11
                                     706950, 712090, 717230, 722370, 727510, 732650, 737790, 742930, 748070, 753210, 758350, 763490, //Level 12
                                     768450, 773420, 778390, 783360, 788330, 793300, 798270, 803240, 808210, 813180, 818150, 823120, 828090, //Level 13
                                     832870, 837670, 842470, 847270, 852070, 856870, 861670, 866470, 871270, 876070, 880870, 885670, 890470, //Level 14
                                     895110, 899760, 904410, 909060, 913710, 918360, 923010, 927660, 932310, 936960, 941610, 946260, 950910, //Level 15
                                     955390, 959890, 964390, 968890, 973390, 977890, 982390, 986890, 991390, 995890, 1000390, 1004890, 1009390, 1013890, //Level 16
                                     1018240, 1022600, 1026960, 1031320, 1035680, 1040040, 1044400, 1048760, 1053120, 1057480, 1061840, 1066200, 1070560, 1074920, //Level 17
                                     1079140, 1083380, 1087620, 1091860, 1096100, 1100340, 1104580, 1108820, 1113060, 1117300, 1121540, 1125780, 1130020, 1134260, 1138500, //Level 18
                                     1142600, 1146710, 1150820, 1154930, 1159040, 1163150, 1167260, 1171370, 1175480, 1179590, 1183700, 1187810, 1191920, 1196030, 1200140, //Level 19
                                     1204130, 1208130, 1212130, 1216130, 1220130, 1224130, 1228130, 1232130, 1236130, 1240130, 1244130, 1248130, 1252130, 1256130, 1260130, 1264130, //Level 20
                                     1268010, 1271900, 1275790, 1279680, 1283570, 1287460, 1291350, 1295240, 1299130, 1303020, 1306910, 1310800, 1314690, 1318580, 1322470, 1326360 //Level 21
                                    };

////////////// MONSTER ARRAYS ///////////////

/////////////  Vo2Max Array ///////////////
float vo2maxValues[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26.8, 27.2, 27.6, 27.95, 28.3, 28.7, 29.1, 29.5, 29.9, 30.2, 30.6, 31.0, 31.4, 31.8, 32.2, 32.6, 32.9, 33.3, 33.6, 33.95, 34.3, 34.65, 35.0, 35.35, 35.7, 36.05, 36.4, 36.75, 37.1, 37.45, 37.8, 38.1, 38.5, 38.9, 39.2, 39.6, 39.9, 40.2, 40.5, 40.8, 41.1, 41.45, 41.8, 42.1, 42.4, 42.7, 43.0, 43.3, 43.6, 43.9, 44.25, 44.5, 44.8, 45.2, 45.5, 45.8, 46.1, 46.5, 46.8, 47.1, 47.4, 47.7, 48.0, 48.35, 48.7, 49.0, 49.3, 49.6, 49.9, 50.2, 50.5, 50.8, 51.1, 51.4, 51.65, 51.9, 52.3, 52.5, 52.8, 53.1, 53.4, 53.7, 54.0, 54.3, 54.55, 54.8, 55.1, 55.4, 55.7, 56.0, 56.25, 56.5, 56.8, 57.1, 57.3, 57.6, 57.9, 58.2, 58.45, 58.7, 59.0, 59.3, 59.5, 59.8, 60.05, 60.3, 60.6, 60.9, 61.1, 61.4, 61.7, 61.95, 62.2, 62.45, 62.7, 62.95, 63.2, 63.4, 63.7, 64.0, 64.3, 64.6, 64.85, 65.1, 65.35, 65.6, 65.9, 66.2, 66.45, 66.7, 67.0, 67.2, 67.5, 67.75, 68.0, 68.25, 68.5, 68.75, 69.0, 69.25, 69.5, 69.7, 69.9, 70.2, 70.5, 70.75, 70.9, 71.2, 71.4, 71.75, 71.9, 72.2, 72.4, 72.75, 72.9, 73.2, 73.4, 73.7, 73.9, 74.2, 74.4, 74.6, 74.8, 75.0, 75.3, 75.55, 75.8, 76.0, 76.2, 76.4, 76.7, 77.0, 77.2, 77.45, 77.65, 77.9, 78.1, 78.3, 78.55, 78.8, 79.0, 79.2, 79.5, 79.7, 80.0, 80.2, 80.4, 80.6, 80.8, 81.1, 81.3, 81.5, 81.8, 82.0, 82.2, 82.4, 82.6, 82.8, 83.0, 83.25, 83.5, 83.75, 83.9, 84.1, 84.3, 84.5, 84.8, 85.0, 85.2, 85.4, 85.6, 85.85, 86.1, 86.3, 86.5, 86.75, 86.9, 87.1, 87.4, 87.6, 87.8, 88.0, 88.2};

/////////////  Vo2Max Array ///////////////

  void serialEvent()
  {
  while (Serial.available())
  {
    int InputGUI = Serial.read();       // get the new byte
    switch (InputGUI)
    {
      case 's':
        SendData = true;
        break;
      case 'e':
        file.close();
        SendData = false;
        Stop = true;
        break;
      case 'u':
//        writeFile(SD, "/MSFT Results.txt", TableResults);
//        appendFile(SD, "/MSFT.txt", "idag?\r\n");
        break;
      default:
        break;
    }
  }
  }

void StartStop()
{
  //Functions to start and stop the test from the serial monitor

    if (SendData == true) {
      timesent.start = true;
      esp_err_t result = esp_now_send(0, (uint8_t *) &timesent, sizeof(struct_initialisetime));
      delay(6681); // M5-Stack delay for beep,beep,beep BEEP
      Timer_begin = millis(); // Sætter baseline timer
      Serial.println("START");
      Start_flag = true; // Aktivates if-statement
      p1_warning = 0;
      i = 1;
      SendData = false;
    }
    else if (Stop == true) {
      timesent.start = false;
      esp_err_t result = esp_now_send(0, (uint8_t *) &timesent, sizeof(struct_initialisetime));
      Serial.println("STOP");
      Start_flag = false; // Deaktivates if-statement
      Stop = false;
    }
  
}

void setup() {


  // Initialising Seriel communication
  Serial.begin(115200);


  // Initialising ESP-Now communication
  WiFi.mode(WIFI_STA);

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  //Call function to send data
  esp_now_register_send_cb(OnDataSent);

  //register peers (Perifireal units)
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  // register first peer
  memcpy(peerInfo.peer_addr, broadcastAddress0, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  //Register second peer
  memcpy(peerInfo.peer_addr, broadcastAddress1, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  //Register second peer
  memcpy(peerInfo.peer_addr, broadcastAddress2, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  // Called the recived data function:
  esp_now_register_recv_cb(OnDataRecv);


  // Initialising SD-card function
  
    SDSPI.begin(SCLK, MISO, MOSI, CS);

    if (!SD.begin(CS, SDSPI)) {
      Serial.println("Card Mount Failed");
      return;
    }
    uint8_t cardType = SD.cardType();

    if (cardType == CARD_NONE) {
      Serial.println("No SD card attached");
      return;
    }
  
}


void loop() {

  // Check for Serial.event
  serialEvent();
  StartStop();

  // Timer calculations
  Timer_run = millis();
  Time = Timer_run - Timer_begin;

  // Vo2Max incemental index
  if (Time >= Beeb_array_with_tollerance[i] && Start_flag) {

    // Counting i variabel up, to check for sensor switching.
    i++;
    Serial.println("-----------------------");
    Serial.print("Time: ");
    Serial.println(Time);
    Serial.print("i: ");
    Serial.println(i);
    Serial.println("-----------------------");
  }

  // Checking if data are arrived
  if (Newdata_flag) {
    Serial.println("-----------------------");

    // Participant 1
    if (Beeb_array_with_tollerance[i - 2] < incomingReadings.p1_arrival_time & incomingReadings.p1_arrival_time < Beeb_array_with_tollerance[i - 1]) {
      Serial.println("P1 Arrival er OK");
      Serial.print("Arrival TID: ");
      Serial.println(incomingReadings.p1_arrival_time);
      Serial.printf("Interval: %d - %d\n", Beeb_array_with_tollerance[i - 2], Beeb_array_with_tollerance[i - 1]);
      Serial.println("-----------------------");
    }
    else {
      Give_warning = true;
      Serial.println("P1 arrival warning");
      Serial.print("Arrival TID: ");
      Serial.println(incomingReadings.p1_arrival_time);
      Serial.printf("Interval: %d - %d\n", Beeb_array_with_tollerance[i - 2], Beeb_array_with_tollerance[i - 1]);
      Serial.println("-----------------------");
    }

    if ( Beeb_array[i - 3] < incomingReadings.p1_departure_time) { // 3 < i &
      Serial.println("Departure tid er OK");
      Serial.print("Departure TID: ");
      Serial.println(incomingReadings.p1_departure_time);

      Serial.print("Skal være større end: ");
      Serial.println(Beeb_array[i - 3]);
      Serial.println("-----------------------");

    }
    else if (2 < i) {  // if (1 < i)
      Give_warning = true;
      Serial.println("P1 departure warning");
      Serial.print("DEPART Time: ");
      Serial.println(incomingReadings.p1_departure_time);
      Serial.print("Skal være større end: ");
      Serial.println(Beeb_array[i - 3]);
      Serial.println("-----------------------");
    }

    if (Give_warning) {
      p1_warning++;
      Serial.print("P1 Warning: ");
      Serial.println(p1_warning);
      Serial.println("----------------------------------------------------------");
      Give_warning = false;
    }


    // Participant 2
    //...
    Newdata_flag = false;
  }
}
